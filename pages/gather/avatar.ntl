<!doctype html>

<html lang="en" class="h-100">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>#title#</title>
    <meta name="description" content="">
    <meta name="author" content="TheSpielplatz">

    <link rel="icon" href="/favicon.ico">
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">

    <link rel="preload" href="/static/fonts/PressStart2P-Regular.ttf" as="font" crossorigin="anonymous" />

    <link href="/static/lib/bootstrap/bootstrap.min.css" rel="stylesheet">
    <script src="/static/js/jquery-3.6.0.min.js"></script>
    <script src="/static/lib/bootstrap/bootstrap.min.js"></script>
    <script src="/static/js/toast.js"></script>
    <script src="/static/js/modal.js"></script>
    <script src="/static/js/auth.js"></script>

    <style>
        .toast{
            text-shadow: none;
            color: black;
        }
        .modal {
            text-shadow: none;
            color: black;
        }
        .btn-primary {
            background-color: #2f036b;
        }
        .btn-primary:hover {
            background-color: #9b4cfd;
        }
    </style>

    <link href="/static/css/main.css" rel="stylesheet">
</head>

<body class="d-flex h-100 text-center text-white bg-dark">
    <input type="hidden" id="objId" value="#objId#">
<div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
    <header class="mb-auto">
        <div>
            <h3 class="float-md-start mb-0 cursor">#title#</h3>
        </div>
    </header>

    <main class="mx-auto" style="width: 800px;">
        <h3>Face Avatar</h3>
        <canvas id="canvasFace" width="50" height="50" style="border: 1px solid gray"></canvas>
        <h3>Player Avatar</h3>
    </main>

    <footer class="mt-auto text-white-50">
        <div class="float-md-start">
            <img class="img-responsive" src="/static/img/tsp_40x40.png" alt="TheSpielplatz" scale="0">
        </div>
        <!--
        <div class="float-md-end">
            <div class="avatar"></div>
        </div>
        -->
        <div class="float-md-end" data-footer="auth">
        </div>
    </footer>
</div>

<script>
    $(() => {
        auth.callback = () => {
            if (auth.player.outfitString) {
                const outfit = JSON.parse(auth.player.outfitString);
                // TODO: Refactor to get Image, which can be loaded into img
                buildFaceAvatar(outfit);
                // Todo: Build this
                buildPlayerAvatar(outfit);
            }
        };
    });

    function dictNotEmpty(obj) {
        if (obj === false || obj === null || obj === undefined) return false;
        return Object.keys(obj).length !== 0;
    }

    function buildPlayerAvatar(outfit) {
        // https://dynamic-assets.gather.town/sprite/avatar-dQCYs4n7O99ksXuBIe33-IeTiKgFytOsyQWBrQgAc-bjYIM3RJKVm2mwEI3BrQ-6313mtew3Zh1QX05N717-PkaSuuEBwsEMkU6YXYzz-f9h9IZO2XdpOVkvb8Jc7.png
    }

    function buildFaceAvatar(outfit) {
        const parts = Object.keys(outfit);

        console.log(parts);
        console.log(outfit.skin);

        const canvas = document.getElementById('canvasFace');
        const ctx = canvas.getContext('2d');
        let images = {};
        let data = {};
        let loading = 0;

        function addImgPart(part) {
            loading++;
            images[part] = new Image();
            images[part].crossOrigin = "Anonymous";
            images[part].onload = imgLoaded;
            images[part].src = outfit[part].previewUrl;
        }

        /*
        3: "skin"
        9: "facial_hair"
        2: "hair"
        5: "glasses"
        6: "hat"

        7: "other" | can be empty
        8: "top"
        4: "bottom"
        1: "shoes"

        0: "costume"
        */

        addImgPart("skin");
        addImgPart("hair");
        if (dictNotEmpty(outfit.glasses)) addImgPart("glasses");
        if (dictNotEmpty(outfit.hat)) addImgPart("hat");
        if (dictNotEmpty(outfit.facial_hair)) addImgPart("facial_hair");

        function imgLoaded() {
            loading--;

            if (loading == 0) {
                finishedLoading();
            }
        }

        function drawData(imageData, dX, dY) {
            for (let i = 0; i < imageData.data.length; i+=4) {
                const r = imageData.data[i];
                const g = imageData.data[i + 1];
                const b = imageData.data[i + 2];
                const a = imageData.data[i + 3];

                const x = (i / 4) % imageData.width;
                const y = Math.floor((i / 4) / imageData.height);

                if (a == 0) continue;
                if (r == 0x84 && g == 0x7E && b == 0x87) continue;
                //if (r == 0x22 && g == 0x20 && b == 0x34) continue;

                ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a / 255})`;
                ctx.fillRect(dX + x, dY + y, 1, 1);
            }
        }

        function createImageData(part) {
            ctx.drawImage(images[part], 0, 0);
            data[part] = ctx.getImageData(0, 0, images[part].naturalWidth, images[part].naturalHeight);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function finishedLoading() {
            const faceX = 0, faceY = 0;
            createImageData("skin");
            if (dictNotEmpty(outfit.hair)) createImageData("hair");
            if (dictNotEmpty(outfit.glasses)) createImageData("glasses");
            if (dictNotEmpty(outfit.hat)) createImageData("hat");
            if (dictNotEmpty(outfit.facial_hair)) createImageData("facial_hair");

            // Top
            drawData(data.skin, faceX + 12, faceY + 12 + 5);
            if (data.glasses) drawData(data.glasses, faceX, faceY);
            if (data.facial_hair) drawData(data.facial_hair,faceX, faceY);
            if (data.hair) drawData(data.hair, faceX, faceY);
            if (data.hat) drawData(data.hat, faceX, faceY);
        }

    }
</script>
</body>
</html>
